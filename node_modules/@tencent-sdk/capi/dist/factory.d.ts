import { Capi } from './';
export declare enum ServiceType {
    /** API 网关服务 (apigateway) */
    apigateway = "apigateway",
    apigw = "apigw",
    /** 云函数服务 (SCF) */
    faas = "scf",
    /** 视频处理服务 (MPS) */
    mps = "mps",
    /** 资源标签服务 (TAG) */
    tag = "tag",
    /** 内容分发 (CDN) */
    cdn = "cdn",
    /** 文件存储 (CFS) */
    cfs = "cfs",
    /** 域名解析服务 (CNS) */
    cns = "cns",
    /**  */
    domain = "domain",
    /** MySQL 数据库 (CynosDB) */
    cynosdb = "cynosdb",
    /** Postgres 数据库 (Postgres) */
    postgres = "postgres",
    /** 私有网络 (VPC) */
    vpc = "vpc",
    cam = "cam",
    clb = "clb",
    monitor = "monitor"
}
export interface ApiErrorOptions {
    message: string;
    stack?: string;
    type: string;
    reqId?: string | number;
    code?: string;
    displayMsg?: string;
}
export declare class CommonError extends Error {
    type: string;
    reqId?: string | number;
    code?: string;
    displayMsg: string;
    constructor({ type, message, stack, reqId, displayMsg, code, }: ApiErrorOptions);
}
interface ApiFactoryOptions<ACTIONS_T> {
    serviceType: ServiceType;
    version: string;
    actions: ACTIONS_T;
    debug?: boolean;
    isV3?: boolean;
    host?: string;
    path?: string;
    requestClient?: string;
    customHandler?: (action: string, res: any) => any;
    responseHandler?: (res: any) => any;
    errorHandler?: (action: string, res: any) => any;
}
export declare function ApiFactory<ACTIONS_T extends readonly string[]>({ debug, isV3, actions, serviceType, host, path, version, customHandler, responseHandler, errorHandler, requestClient, }: ApiFactoryOptions<ACTIONS_T>): Record<ACTIONS_T[number], (capi: Capi, inputs: any) => any>;
export {};
//# sourceMappingURL=factory.d.ts.map