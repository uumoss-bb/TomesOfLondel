(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('crypto'), require('@tencent-sdk/common'), require('got')) :
    typeof define === 'function' && define.amd ? define(['exports', 'crypto', '@tencent-sdk/common', 'got'], factory) :
    (factory((global.capi = {}),global.crypto,global['@tencent-sdk/common'],global.got));
}(this, (function (exports,crypto,common,got) { 'use strict';

    got = got && got.hasOwnProperty('default') ? got['default'] : got;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function getHost(_a, isV1) {
        var host = _a.host, serviceType = _a.serviceType, region = _a.region, baseHost = _a.baseHost;
        if (isV1 === void 0) { isV1 = false; }
        if (!host) {
            host = "" + serviceType + (isV1 ? '' : "." + region) + "." + baseHost;
        }
        return host;
    }
    function getUrl(opts, isV1) {
        if (isV1 === void 0) { isV1 = false; }
        var host = getHost(opts, isV1);
        var path = opts.path || '/';
        return (opts.protocol || 'https') + "://" + host + path;
    }
    function sign(str, secretKey, algorithm) {
        if (algorithm === void 0) { algorithm = 'sha256'; }
        var hmac = crypto.createHmac(algorithm, secretKey);
        return hmac.update(Buffer.from(str, 'utf8')).digest();
    }
    /**
     * generate tencent cloud sign result
     *
     * @param {Payload} payload
     * @param {CapiOptions} options
     * @returns {TencentSignResult}
     */
    function tencentSign(payload, options) {
        var hostParams = {
            host: options.host,
            path: options.path,
            protocol: options.protocol,
            baseHost: options.baseHost,
            serviceType: options.serviceType,
            region: options.region,
        };
        var url = getUrl(hostParams);
        var host = getHost(hostParams);
        var d = new Date();
        var timestamp = String(common.getUnixTime(d));
        var date = common.getDate(d);
        var algorithm = 'TC3-HMAC-SHA256';
        // 1. create Canonical request string
        var httpRequestMethod = (options.method || 'POST').toUpperCase();
        var canonicalURI = '/';
        var canonicalQueryString = '';
        var canonicalHeaders = "content-type:application/json\nhost:" + host + "\n";
        var signedHeaders = 'content-type;host';
        var hashedRequestPayload = crypto.createHash('sha256')
            .update(JSON.stringify(payload))
            .digest('hex');
        var canonicalRequest = httpRequestMethod + "\n" + canonicalURI + "\n" + canonicalQueryString + "\n" + canonicalHeaders + "\n" + signedHeaders + "\n" + hashedRequestPayload;
        // 2. create string to sign
        var credentialScope = date + "/" + options.serviceType + "/tc3_request";
        var hashedCanonicalRequest = crypto.createHash('sha256')
            .update(canonicalRequest)
            .digest('hex');
        var stringToSign = algorithm + "\n" + timestamp + "\n" + credentialScope + "\n" + hashedCanonicalRequest;
        // 3. calculate signature
        var secretDate = sign(date, Buffer.from("TC3" + options.secretKey, 'utf8'));
        var secretService = sign(options.serviceType, secretDate);
        var secretSigning = sign('tc3_request', secretService);
        var signature = crypto.createHmac('sha256', secretSigning)
            .update(Buffer.from(stringToSign, 'utf8'))
            .digest('hex');
        // 4. create authorization
        var authorization = algorithm + " Credential=" + options.secretId + "/" + credentialScope + ", SignedHeaders=" + signedHeaders + ", Signature=" + signature;
        return {
            url: url,
            payload: payload,
            host: host,
            authorization: authorization,
            timestamp: timestamp,
        };
    }
    /**
     * version1: generate tencent cloud sign result
     *
     * @param {Payload} payload
     * @param {CapiOptions} options
     * @returns {TencentSignResultV1}
     */
    function tencentSignV1(payload, options) {
        var hostParams = {
            host: options.host,
            path: options.path,
            protocol: options.protocol,
            baseHost: options.baseHost,
            serviceType: options.serviceType,
            region: options.region,
        };
        var url = getUrl(hostParams, true);
        var Host = getHost(hostParams, true);
        var d = new Date();
        var Timestamp = common.getUnixTime(d);
        var Nonce = Math.round(Math.random() * 65535);
        payload.Region = options.region;
        payload.Nonce = Nonce;
        payload.Timestamp = Timestamp;
        payload.SecretId = options.secretId;
        payload.Version = payload.Version || options.version;
        payload.RequestClient = options.requestClient;
        if (options.token) {
            payload.Token = options.token;
        }
        if (options.signatureMethod === 'sha256') {
            payload.SignatureMethod = 'HmacSHA256';
        }
        payload = common.flatten(payload);
        var keys = Object.keys(payload).sort();
        var method = (options.method || 'POST').toUpperCase();
        var qstr = '';
        keys.forEach(function (key) {
            if (key === '') {
                return;
            }
            key = key.indexOf('_') ? key.replace(/_/g, '.') : key;
            var val = payload[key];
            if (method === 'POST' && val && val[0] === '@') {
                return;
            }
            if (val === undefined ||
                val === null ||
                (typeof val === 'number' && isNaN(val))) {
                val = '';
            }
            qstr += "&" + key + "=" + val;
        });
        qstr = qstr.slice(1);
        payload.Signature = sign("" + method + Host + options.path + "?" + qstr, Buffer.from(options.secretKey, 'utf8'), options.signatureMethod).toString('base64');
        return {
            url: url,
            method: method,
            payload: payload,
        };
    }

    (function (ServiceType) {
        /** API 网关服务 (apigateway) */
        ServiceType["apigateway"] = "apigateway";
        ServiceType["apigw"] = "apigw";
        /** 云函数服务 (SCF) */
        ServiceType["faas"] = "scf";
        /** 视频处理服务 (MPS) */
        ServiceType["mps"] = "mps";
        /** 资源标签服务 (TAG) */
        ServiceType["tag"] = "tag";
        /** 内容分发 (CDN) */
        ServiceType["cdn"] = "cdn";
        /** 文件存储 (CFS) */
        ServiceType["cfs"] = "cfs";
        /** 域名解析服务 (CNS) */
        ServiceType["cns"] = "cns";
        /**  */
        ServiceType["domain"] = "domain";
        /** MySQL 数据库 (CynosDB) */
        ServiceType["cynosdb"] = "cynosdb";
        /** Postgres 数据库 (Postgres) */
        ServiceType["postgres"] = "postgres";
        /** 私有网络 (VPC) */
        ServiceType["vpc"] = "vpc";
        /* 访问管理 （CAM）  */
        ServiceType["cam"] = "cam";
        // 负载均衡 （CLB）*/
        ServiceType["clb"] = "clb";
        // 监控 */
        ServiceType["monitor"] = "monitor";
    })(exports.ServiceType || (exports.ServiceType = {}));
    var CommonError = /** @class */ (function (_super) {
        __extends(CommonError, _super);
        function CommonError(_a) {
            var type = _a.type, message = _a.message, stack = _a.stack, reqId = _a.reqId, displayMsg = _a.displayMsg, code = _a.code;
            var _this = _super.call(this, message) || this;
            _this.type = type;
            if (stack) {
                _this.stack = stack;
            }
            if (reqId) {
                _this.reqId = reqId;
            }
            if (code) {
                _this.code = code;
            }
            _this.displayMsg = displayMsg !== null && displayMsg !== void 0 ? displayMsg : message;
            return _this;
        }
        return CommonError;
    }(Error));
    function ApiFactory(_a) {
        var _this = this;
        var _b = _a.debug, debug = _b === void 0 ? false : _b, _c = _a.isV3, isV3 = _c === void 0 ? false : _c, actions = _a.actions, serviceType = _a.serviceType, host = _a.host, path = _a.path, version = _a.version, customHandler = _a.customHandler, _d = _a.responseHandler, responseHandler = _d === void 0 ? function (res) { return res; } : _d, errorHandler = _a.errorHandler, _e = _a.requestClient, requestClient = _e === void 0 ? 'TENCENT_SDK' : _e;
        var APIS = {};
        actions.forEach(function (action) {
            APIS[action] = function (capi, inputs) { return __awaiter(_this, void 0, void 0, function () {
                var reqData, res, Response_1, e_1;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            inputs = common.deepClone(inputs);
                            reqData = common.cleanEmptyValue(__assign({ action: action,
                                version: version }, inputs));
                            inputs = common.cleanEmptyValue(inputs);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, capi.request(reqData, {
                                    isV3: isV3,
                                    debug: debug,
                                    requestClient: requestClient,
                                    host: host || serviceType + ".tencentcloudapi.com",
                                    path: path || '/',
                                })];
                        case 2:
                            res = _b.sent();
                            // Customize response handler
                            if (customHandler) {
                                return [2 /*return*/, customHandler(action, res)];
                            }
                            Response_1 = res.Response;
                            if ((_a = Response_1 === null || Response_1 === void 0 ? void 0 : Response_1.Error) === null || _a === void 0 ? void 0 : _a.Code) {
                                if (errorHandler) {
                                    return [2 /*return*/, errorHandler(action, Response_1)];
                                }
                                throw new CommonError({
                                    type: "API_" + serviceType.toUpperCase() + "_" + action,
                                    message: Response_1.Error.Message + " (reqId: " + Response_1.RequestId + ")",
                                    reqId: Response_1.RequestId,
                                    code: Response_1.Error.Code,
                                });
                            }
                            return [2 /*return*/, responseHandler(Response_1)];
                        case 3:
                            e_1 = _b.sent();
                            throw new CommonError({
                                type: "API_" + serviceType.toUpperCase() + "_" + action,
                                message: e_1.message,
                                stack: e_1.stack,
                                reqId: e_1.reqId,
                                code: e_1.code,
                            });
                        case 4: return [2 /*return*/];
                    }
                });
            }); };
        });
        return APIS;
    }

    var Capi = /** @class */ (function () {
        function Capi(options) {
            this.defaultOptions = {
                path: '/',
                method: 'POST',
                protocol: 'https',
                baseHost: 'tencentcloudapi.com',
                serviceType: '',
                secretId: '',
                secretKey: '',
                region: 'ap-guangzhou',
                signatureMethod: 'sha1',
                isPascalCase: true,
            };
            this.options = Object.assign(this.defaultOptions, options);
        }
        Capi.prototype.request = function (data, opts, isV3) {
            if (opts === void 0) { opts = this.defaultOptions; }
            if (isV3 === void 0) { isV3 = false; }
            return __awaiter(this, void 0, void 0, function () {
                var options, action, Action, Version, version, restData, reqOption, _a, url_1, payload, authorization, timestamp, host, reqData, _b, url_2, method, payload, url, restOptions, body;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            options = Object.assign(this.options, opts);
                            options.requestClient =
                                options.requestClient || data.requestClient || 'TENCENT_SDK_CAPI';
                            action = data.action, Action = data.Action, Version = data.Version, version = data.version, restData = __rest(data, ["action", "Action", "Version", "version"]);
                            action = action || Action;
                            version = version || Version;
                            reqOption = {
                                url: '',
                                method: 'GET',
                                responseType: 'json',
                            };
                            if (isV3 || opts.isV3) {
                                _a = tencentSign(this.options.isPascalCase ? common.pascalCaseProps(restData) : restData, options), url_1 = _a.url, payload = _a.payload, authorization = _a.authorization, timestamp = _a.timestamp, host = _a.host;
                                reqOption = {
                                    url: url_1,
                                    method: 'POST',
                                    responseType: 'json',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        Authorization: authorization,
                                        Host: host,
                                        'X-TC-Action': action,
                                        'X-TC-Version': version || options.version,
                                        'X-TC-Timestamp': timestamp,
                                        'X-TC-Region': options.region,
                                    },
                                    json: payload,
                                };
                                reqOption.headers['X-TC-RequestClient'] = options.requestClient;
                                if (this.options.token) {
                                    reqOption.headers['X-TC-Token'] = this.options.token;
                                }
                            }
                            else {
                                reqData = __assign(__assign({}, restData), { Action: action });
                                _b = tencentSignV1(this.options.isPascalCase ? common.pascalCaseProps(reqData) : reqData, options), url_2 = _b.url, method = _b.method, payload = _b.payload;
                                reqOption = {
                                    url: url_2,
                                    method: method,
                                    responseType: 'json',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                };
                                if (method === 'POST') {
                                    reqOption.form = payload;
                                }
                                else {
                                    reqOption.url += '?' + common.querystring(payload);
                                }
                            }
                            if (options.timeout) {
                                reqOption.timeout = options.timeout;
                            }
                            // debug request option
                            if (options.debug) {
                                common.logger('Request Option', JSON.stringify(reqOption));
                            }
                            url = reqOption.url, restOptions = __rest(reqOption, ["url"]);
                            return [4 /*yield*/, got(url, restOptions)];
                        case 1:
                            body = (_c.sent()).body;
                            return [2 /*return*/, body];
                    }
                });
            });
        };
        return Capi;
    }());

    exports.Capi = Capi;
    exports.tencentSign = tencentSign;
    exports.tencentSignV1 = tencentSignV1;
    exports.CommonError = CommonError;
    exports.ApiFactory = ApiFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
