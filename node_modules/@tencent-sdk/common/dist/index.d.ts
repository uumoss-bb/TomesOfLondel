import { PascalCasedPropertiesDeep, CamelCasedPropertiesDeep } from 'type-fest';
export * from './logger';
export * from './cropto';
export interface KeyValueObject {
    [key: string]: any;
}
/**
 * simple deep clone object
 * @param {object} obj object
 */
export declare function deepClone<T>(obj: T): T;
/**
 * return variable real type
 * @param {any} obj input variable
 */
export declare function getRealType<T>(obj: T): string;
/**
 * is array
 * @param obj object
 */
export declare function isArray<T>(obj: T[] | T): obj is T[];
/**
 * is object
 * @param obj object
 */
export declare function isObject<T>(obj: T): obj is T;
export declare function isEmpty<T>(val: T): boolean;
export declare function cleanEmptyValue<T>(obj: T): T;
export declare function camelCaseProps<T>(obj: T, pascalCase?: boolean): CamelCasedPropertiesDeep<T> | PascalCasedPropertiesDeep<T>;
export declare function pascalCaseProps<T>(obj: T): PascalCasedPropertiesDeep<T>;
export declare function logger(topic: string, content: string): void;
export declare function getUnixTime(date: Date): number;
export declare function getDate(date: Date): string;
/**
 * iterate object or array
 * @param obj object or array
 * @param iterator iterator function
 */
export declare function forEach(obj: object | any[], iterator: (value: any, index: number | string, array: any) => void): void;
/**
 * flatter request parameter
 * @param obj target object or array
 */
export declare function flatten(obj: {
    [propName: string]: any;
}): {
    [propName: string]: any;
};
export declare function querystring(obj?: KeyValueObject, isSafeEncode?: boolean): string;
export declare function sortObjectKey(obj: KeyValueObject): string[];
export declare function stringifyObject(obj: KeyValueObject, sortKeyMethod: (o: KeyValueObject) => string[]): string;
//# sourceMappingURL=index.d.ts.map