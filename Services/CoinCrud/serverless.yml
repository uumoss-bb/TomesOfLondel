service: TheTomes-CoinCrud

# plugins:
  # - serverless-plugin-aws-alerts
  
custom:
  dev:
    BackupsEnabled: false
  staging:
    BackupsEnabled: false
  prod:
    BackupsEnabled: true

  stage: ${opt:stage, self:provider.stage}
  dbName: TheTomes-${self:custom.stage}-coins

  tableThroughputs:
    prod: 5
    default: 10
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

  # alerts:
  #   stages:
  #     - prod
  #     - staging

  #   dashboards: false

  #   nameTemplate: $[functionName]-$[metricName]-Alarm # Optionally - naming template for alarms, can be overwritten in definitions
  #   prefixTemplate: $[stackName] # Optionally - override the alarm name prefix

  #   topics:
  #     alarm:
  #       topic: ${self:service}-${opt:stage}-alerts-alarm
  #       notifications:
  #         - protocol: email
  #           endpoint: balserbrodie@gmail.com

  #   definitions:  # these defaults are merged with your definitions
  #     InternalErrors:
  #       metric: InternalErrors
  #       description: 'This will scan a functions logs and if it sees the pattern(e.g. error status = 500) this it will sound the alarm'
  #       threshold: 0
  #       statistic: Sum
  #       period: 60
  #       evaluationPeriods: 1
  #       datapointsToAlarm: 1
  #       comparisonOperator: GreaterThanThreshold
  #       pattern: '{$.statusCode=500}'

  #   alarms:
  #     - InternalErrors
    
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment: 
    STAGE: ${self:custom.stage}
    DBNAME: ${self:custom.dbName}
    
  deploymentBucket: 
    name: tomes-${self:custom.stage}-deployment-111
    tags:
      project: TomesOfLondelo
      cluster: CoinCRUD_microservice
      enviroment: ${self:custom.stage}

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #       - dynamodb:BatchGetItem
  #     Resource:
  #       - 'Fn::ImportValue': TheTomes-${self:custom.stage}-CoinTableArn
  #       - ${cf:TheTomes-CoinCrud-${self:custom.stage}.CoinTableArn}/index/*

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-TheTomes-RestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-TheTomes-RestApiRootResourceId

resources: 
  - ${file(db/table.yml)}
  - Outputs: ${file(db/output.yml)}